#test_integration.py
import unittest
import time
from google.cloud import datastore
import requests

class IntegrationTestCF(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Cloud Function –∏ Datastore"""

    def setUp(self):
        # -----------------------------
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cloud Function
        # -----------------------------
        self.cf_url = "https://YOUR_CLOUD_FUNCTION_URL"  # <- –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π CF URL
        self.ds_client = datastore.Client()  # –ö–ª–∏–µ–Ω—Ç Datastore
        self.test_id = f"test_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–µ—Å—Ç–∞
        print(f"üöÄ –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, test_id={self.test_id}")

    def tearDown(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏–∑ Datastore –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        query = self.ds_client.query(kind="Task")  # <- –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π kind
        tasks = list(query.fetch())
        for task in tasks:
            if self.test_id in str(task.get("description", "")):
                self.ds_client.delete(task.key)

    def create_task_in_datastore(self, desc):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –≤ Datastore"""
        key = self.ds_client.key("Task")  # <- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à kind, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        task = datastore.Entity(key=key)
        task.update({
            "description": desc,
            "is_done": False
        })
        self.ds_client.put(task)
        return task.id

    def test_update_task_status(self):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ Datastore –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Cloud Function"""
        desc = f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {self.test_id}"
        task_id = self.create_task_in_datastore(desc)
        print(f"‚úì –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Datastore, id={task_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ CF
        payload = {"id": task_id, "is_done": True}  # <- –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–ª—è payload
        response = requests.post(self.cf_url, json=payload, headers={"Content-Type": "application/json"})
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.json().get("success", False))
        print("‚úì –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Cloud Function")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Datastore
        key = self.ds_client.key("Task", task_id)
        task = self.ds_client.get(key)
        self.assertTrue(task["is_done"])
        print("‚úì –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Datastore")

    def test_multiple_tasks_flow(self):
        """–°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–Ω—É —á–µ—Ä–µ–∑ CF"""
        task_ids = []
        for i in range(3):
            desc = f"–ó–∞–¥–∞—á–∞ {i+1} {self.test_id}"
            task_id = self.create_task_in_datastore(desc)
            task_ids.append(task_id)
        print("‚úì –°–æ–∑–¥–∞–Ω—ã 3 –∑–∞–¥–∞—á–∏ –≤ Datastore")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É
        payload = {"id": task_ids[1], "is_done": True}
        response = requests.post(self.cf_url, json=payload, headers={"Content-Type": "application/json"})
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.json().get("success", False))
        print("‚úì –°—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ CF")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for i, task_id in enumerate(task_ids):
            task = self.ds_client.get(self.ds_client.key("Task", task_id))
            if i == 1:
                self.assertTrue(task["is_done"])
            else:
                self.assertFalse(task["is_done"])
        print("‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–æ–π–¥–µ–Ω–∞")


if __name__ == "__main__":
    unittest.main(verbosity=2)
